---
upgrade:
  - |
    The old filter placeholders for ``custom_query`` are no longer supported.
    Replace your custom filter expressions with the new ``${filters}`` placeholder:

    **Old:**
    ``custom_query``:
    ```python
      {
          "query": {
              "bool": {
                  "should": [{"multi_match": {
                      "query": ${query},                 // mandatory query placeholder
                      "type": "most_fields",
                      "fields": ["content", "title"]}}
                  ],
                  "filter": [                                 // optional custom filters
                      {"terms": {"year": ${years}}},
                      {"terms": {"quarter": ${quarters}}},
                      {"range": {"date": {"gte": ${date}}}}
                  ]
              }
          },
      }
    ```
    query:
    ```python
      retriever.retrieve(
          query="What is the meaning of life?",
          filters={"years": [2019, 2020], "quarters": [1, 2, 3], "date": "2019-03-01"}
      )
    ```

    **New:**
    ``custom_query``:
    ```python
      {
          "query": {
              "bool": {
                  "should": [{"multi_match": {
                      "query": ${query},                 // mandatory query placeholder
                      "type": "most_fields",
                      "fields": ["content", "title"]}}
                  ],
                  "filter": ${filters}                 // optional filters placeholder
              }
          },
      }
    ```
    query:
    ```python
      retriever.retrieve(
          query="What is the meaning of life?",
          filters={"year": [2019, 2020], "quarter": [1, 2, 3], "date": {"$gte": "2019-03-01"}}
      )
    ```
features:
  - |
    When using ``custom_query`` in ``BM25Retriever`` along with one of ``OpenSearch``
    or ``elasticsearch``, we added support for dynamic ``filters`` like in normal queries.
    This allows for changing filters at query-time without having to change ``custom_query``:
    Instead of defining filter expressions and field placeholders, all you have to do,
    is setting the ``${filters}`` placeholder analogous to the ``${query}`` placeholder into
    your ``custom_query``.
    **For example:**
    ```python
      {
          "query": {
              "bool": {
                  "should": [{"multi_match": {
                      "query": ${query},                 // mandatory query placeholder
                      "type": "most_fields",
                      "fields": ["content", "title"]}}
                  ],
                  "filter": ${filters}                 // optional filters placeholder
              }
          },
      }
    ```
